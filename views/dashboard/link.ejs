<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Link Details - <%= link.short %></title>
    <link rel="stylesheet" href="/css/colors.css">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/link.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    
    <!-- D3.js for charts -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .link-detail-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
        }

        .main-content {
            background: var(--background2);
            border: 1px solid var(--background2-border);
            border-radius: 12px;
            padding: 30px;
        }

        .link-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .link-title {
            color: var(--text1);
            font-size: 2rem;
            margin: 0;
            text-transform: uppercase;
            font-weight: 700;
        }

        .link-status {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-owner {
            background: var(--rust3);
            color: white;
        }

        .status-admin {
            background: var(--background3);
            color: var(--text1);
            border: 1px solid var(--background3-border);
        }

        .status-warning {
            background: #ff6b6b;
            color: white;
        }

        .link-details {
            display: grid;
            gap: 20px;
            margin-bottom: 30px;
        }

        .detail-item {
            padding: 20px;
            background: var(--background1);
            border: 1px solid var(--background1-border);
            border-radius: 8px;
        }

        .detail-label {
            font-weight: 600;
            color: var(--rust3);
            font-size: 0.9rem;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .detail-value {
            color: var(--text1);
            font-size: 1.1rem;
            word-break: break-all;
            line-height: 1.4;
        }

        .detail-value.url {
            text-decoration: underline;
            color: var(--text2);
        }

        .stats-sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .stats-card {
            background: var(--background2);
            border: 1px solid var(--background2-border);
            border-radius: 12px;
            padding: 20px;
        }

        .stats-title {
            color: var(--text1);
            font-size: 1.2rem;
            font-weight: 700;
            margin: 0 0 15px 0;
            text-transform: uppercase;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid var(--background1-border);
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        .stat-label {
            color: var(--text2);
            font-weight: 500;
        }

        .stat-value {
            color: var(--rust3);
            font-weight: 700;
            font-size: 1.1rem;
        }

        .chart-placeholder {
            height: 150px;
            background: var(--background1);
            border: 2px dashed var(--background1-border);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text2);
            font-style: italic;
            margin-top: 15px;
        }

        /* D3.js Chart Styles */
        .d3-chart {
            background: var(--background1);
            border-radius: 8px;
            margin-top: 15px;
            overflow: hidden;
        }

        .d3-chart svg {
            display: block;
            width: 100%;
            height: 100%;
        }

        .line-chart-path {
            fill: none;
            stroke: var(--rust3);
            stroke-width: 2px;
            stroke-linejoin: round;
            stroke-linecap: round;
        }

        .chart-dot {
            fill: var(--rust3);
            stroke: var(--background1);
            stroke-width: 2px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .chart-dot:hover {
            r: 6;
            fill: var(--rust2);
        }

        .chart-axis {
            color: var(--text2);
            font-size: 12px;
        }

        .chart-axis line {
            stroke: var(--background2-border);
        }

        .chart-axis path {
            stroke: var(--background2-border);
        }

        .chart-axis text {
            fill: var(--text2);
            font-family: "Montserrat", sans-serif;
        }

        .chart-grid line {
            stroke: var(--background2-border);
            stroke-dasharray: 2,2;
            opacity: 0.5;
        }

        .chart-tooltip {
            position: absolute;
            background: rgba(18, 9, 26, 0.95);
            border: 1px solid var(--background2-border);
            border-radius: 6px;
            padding: 8px 12px;
            color: var(--text1);
            font-size: 13px;
            pointer-events: none;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .pie-slice {
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pie-slice:hover {
            transform: scale(1.05);
            filter: brightness(1.1);
        }

        .pie-label {
            fill: var(--text1);
            font-size: 12px;
            font-family: "Montserrat", sans-serif;
            text-anchor: middle;
        }

        .bar-rect {
            fill: var(--rust3);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .bar-rect:hover {
            fill: var(--rust2);
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 25px;
            flex-wrap: wrap;
        }

        .btn-danger {
            background: #ff6b6b;
            color: white;
        }

        .btn-danger:hover {
            background: #ff5252;
        }

        .referrer-list {
            margin-top: 10px;
        }

        .referrer-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid var(--background1-border);
        }

        .referrer-item:last-child {
            border-bottom: none;
        }

        .browser-chart {
            margin-top: 15px;
        }

        .browser-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .browser-bar {
            flex-grow: 1;
            height: 6px;
            background: var(--background1);
            border-radius: 3px;
            margin: 0 10px;
            overflow: hidden;
        }

        .browser-fill {
            height: 100%;
            background: var(--rust3);
            border-radius: 3px;
            transition: width 0.5s ease;
        }

        @media (max-width: 768px) {
            .link-detail-container {
                grid-template-columns: 1fr;
                gap: 20px;
                padding: 15px;
            }
            
            .main-content {
                padding: 20px;
            }
            
            .link-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/header.ejs", {user: user, test: test}) %>
    
    <div class="dashboard-container">
        <%- include("partials/sidebar.ejs") %>
        
        <div id="main">
            <div class="link-detail-container">
                <div class="main-content">
                    <div class="link-header">
                        <h1 class="link-title"><%= link.short %></h1>
                        <div class="link-status">
                            <% if (isOwner) { %>
                                <span class="status-badge status-owner">Owner</span>
                            <% } %>
                            <% if (isAdmin && !isOwner) { %>
                                <span class="status-badge status-admin">Admin Access</span>
                            <% } %>
                            <% if (link.warning) { %>
                                <span class="status-badge status-warning">Warning Enabled</span>
                            <% } %>
                        </div>
                    </div>

                    <div class="link-details">
                        <div class="detail-item">
                            <div class="detail-label">Short URL</div>
                            <div class="detail-value">
                                <a href="/u/<%= link.short %>" target="_blank" rel="noopener">
                                    u/<%= link.short %>
                                </a>
                            </div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-label">Destination URL</div>
                            <div class="detail-value url">
                                <a href="<%= link.url %>" target="_blank" rel="noopener"><%= link.url %></a>
                            </div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-label">Created</div>
                            <div class="detail-value">
                                <%= new Date(link.created_at).toLocaleDateString('en-US', { 
                                    weekday: 'long', 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                }) %>
                            </div>
                        </div>

                        <% if (isAdmin || isOwner) { %>
                            <div class="detail-item">
                                <div class="detail-label">Owner</div>
                                <div class="detail-value"><%= link.username %></div>
                            </div>
                        <% } %>
                    </div>

                    <div class="action-buttons">
                        <a href="/u/<%= link.short %>" target="_blank" class="btn btn-primary">Visit Link</a>
                        <button onclick="copyToClipboard('/u/<%= link.short %>')" class="btn btn-secondary">Copy URL</button>
                        <% if (isOwner || isAdmin) { %>
                            <button onclick="editLink()" class="btn btn-secondary">Edit</button>
                            <button onclick="deleteLink()" class="btn btn-danger">Delete</button>
                        <% } %>
                    </div>
                </div>

                <div class="stats-sidebar">
                    <div class="stats-card">
                        <h3 class="stats-title">Click Statistics</h3>
                        <div class="stat-item">
                            <span class="stat-label">Total Clicks</span>
                            <span class="stat-value"><%= stats.totalClicks.toLocaleString() %></span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Today</span>
                            <span class="stat-value"><%= stats.todayClicks %></span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">This Week</span>
                            <span class="stat-value"><%= stats.thisWeekClicks %></span>
                        </div>
                        <div id="click-history-chart" class="d3-chart" style="height: 150px;">
                        </div>
                    </div>

                    <div class="stats-card">
                        <h3 class="stats-title">Top Referrers</h3>
                        <div id="referrer-bar-chart" class="d3-chart" style="height: 180px;">
                        </div>
                    </div>

                    <div class="stats-card">
                        <h3 class="stats-title">Browsers</h3>
                        <div id="browser-pie-chart" class="d3-chart" style="height: 200px;">
                        </div>
                    </div>

                    <div class="stats-card">
                        <h3 class="stats-title">Recent Activity</h3>
                        <% stats.clickHistory.slice(-3).forEach(day => { %>
                            <div class="stat-item">
                                <span class="stat-label"><%= day.date %></span>
                                <span class="stat-value"><%= day.clicks %></span>
                            </div>
                        <% }) %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function copyToClipboard(text) {
            const fullUrl = window.location.origin + text;
            navigator.clipboard.writeText(fullUrl).then(() => {
                Toastify({
                    text: "URL copied to clipboard! 📋",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "linear-gradient(to right, #00b09b, #96c93d)",
                    }
                }).showToast();
            }).catch(err => {
                console.error('Failed to copy: ', err);
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = fullUrl;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                Toastify({
                    text: "URL copied to clipboard! 📋",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "linear-gradient(to right, #00b09b, #96c93d)",
                    }
                }).showToast();
            });
        }

        function editLink() {
            // Create a modal-like overlay for editing
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.7);
                z-index: 10001;
                display: flex;
                align-items: center;
                justify-content: center;
                backdrop-filter: blur(5px);
            `;
            
            const modal = document.createElement('div');
            modal.style.cssText = `
                background: var(--background2);
                border: 1px solid var(--background2-border);
                border-radius: 12px;
                padding: 30px;
                max-width: 500px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            modal.innerHTML = `
                <h3 style="color: var(--text1); margin-top: 0; margin-bottom: 20px;">Edit Link</h3>
                <form id="editForm">
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; color: var(--rust3); font-weight: 600; margin-bottom: 8px;">Short Code</label>
                        <input type="text" value="<%= link.short %>" disabled style="
                            width: 100%;
                            padding: 12px;
                            border: 1px solid var(--background3-border);
                            border-radius: 6px;
                            background: var(--background1);
                            color: var(--text2);
                            font-family: monospace;
                            box-sizing: border-box;
                        ">
                    </div>
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; color: var(--rust3); font-weight: 600; margin-bottom: 8px;">Destination URL</label>
                        <input type="url" id="editUrl" value="<%= link.url %>" required style="
                            width: 100%;
                            padding: 12px;
                            border: 1px solid var(--background3-border);
                            border-radius: 6px;
                            background: var(--background1);
                            color: var(--text1);
                            box-sizing: border-box;
                        ">
                    </div>
                    <% if (isAdmin) { %>
                    <div style="margin-bottom: 25px;">
                        <label style="display: flex; align-items: center; gap: 8px; color: var(--text1); cursor: pointer;">
                            <input type="checkbox" id="editWarning" <%= link.warning ? 'checked' : '' %> style="margin: 0;">
                            Enable warning page
                        </label>
                    </div>
                    <% } %>
                    <div style="display: flex; gap: 15px; justify-content: flex-end;">
                        <button type="button" onclick="closeEditModal()" style="
                            padding: 12px 24px;
                            border: 1px solid var(--background3-border);
                            border-radius: 6px;
                            background: var(--background3);
                            color: var(--text1);
                            cursor: pointer;
                        ">Cancel</button>
                        <button type="submit" style="
                            padding: 12px 24px;
                            border: none;
                            border-radius: 6px;
                            background: var(--rust3);
                            color: white;
                            cursor: pointer;
                        ">Save Changes</button>
                    </div>
                </form>
            `;
            
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            // Focus on URL input
            setTimeout(() => {
                document.getElementById('editUrl').focus();
            }, 100);
            
            // Handle form submission
            document.getElementById('editForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const url = document.getElementById('editUrl').value;
                
                // Only get warning value if user is admin, otherwise keep current value
                let warning = <%= link.warning ? 1 : 0 %>;
                const warningElement = document.getElementById('editWarning');
                if (warningElement) {
                    warning = warningElement.checked ? 1 : 0;
                }
                
                try {
                    const response = await fetch('/api/link/<%= link.short %>/edit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ url, warning })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        Toastify({
                            text: result.message + " ✅",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "linear-gradient(to right, #00b09b, #96c93d)",
                            }
                        }).showToast();
                        closeEditModal();
                        // Reload page to show updated data
                        setTimeout(() => window.location.reload(), 1000);
                    } else {
                        Toastify({
                            text: result.message + " ❌",
                            duration: 4000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "linear-gradient(to right, #ff5f6d, #ffc371)",
                            }
                        }).showToast();
                    }
                } catch (error) {
                    console.error('Edit error:', error);
                    Toastify({
                        text: "Failed to update link ❌",
                        duration: 4000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "linear-gradient(to right, #ff5f6d, #ffc371)",
                        }
                    }).showToast();
                }
            });
            
            // Close modal when clicking overlay
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeEditModal();
                }
            });
            
            window.closeEditModal = () => {
                document.body.removeChild(overlay);
            };
        }

        function deleteLink() {
            // Show confirmation with toast-style confirmation
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.7);
                z-index: 10001;
                display: flex;
                align-items: center;
                justify-content: center;
                backdrop-filter: blur(5px);
            `;
            
            const modal = document.createElement('div');
            modal.style.cssText = `
                background: var(--background2);
                border: 1px solid var(--background2-border);
                border-radius: 12px;
                padding: 30px;
                max-width: 400px;
                width: 90%;
                text-align: center;
            `;
            
            modal.innerHTML = `
                <div style="color: #f44336; font-size: 48px; margin-bottom: 20px;">🗑️</div>
                <h3 style="color: var(--text1); margin: 0 0 15px 0;">Delete Link</h3>
                <p style="color: var(--text2); margin-bottom: 25px; line-height: 1.5;">
                    Are you sure you want to delete <strong style="color: var(--rust3);"><%= link.short %></strong>?<br>
                    This action cannot be undone.
                </p>
                <div style="display: flex; gap: 15px; justify-content: center;">
                    <button onclick="closeDeleteModal()" style="
                        padding: 12px 24px;
                        border: 1px solid var(--background3-border);
                        border-radius: 6px;
                        background: var(--background3);
                        color: var(--text1);
                        cursor: pointer;
                    ">Cancel</button>
                    <button onclick="confirmDelete()" style="
                        padding: 12px 24px;
                        border: none;
                        border-radius: 6px;
                        background: #f44336;
                        color: white;
                        cursor: pointer;
                    ">Delete</button>
                </div>
            `;
            
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            window.closeDeleteModal = () => {
                document.body.removeChild(overlay);
            };
            
            window.confirmDelete = async () => {
                try {
                    const response = await fetch('/api/link/<%= link.short %>', {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        Toastify({
                            text: result.message + " ✅",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "linear-gradient(to right, #00b09b, #96c93d)",
                            }
                        }).showToast();
                        closeDeleteModal();
                        // Redirect to links page
                        setTimeout(() => {
                            window.location.href = '/dashboard/links';
                        }, 1000);
                    } else {
                        Toastify({
                            text: result.message + " ❌",
                            duration: 4000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "linear-gradient(to right, #ff5f6d, #ffc371)",
                            }
                        }).showToast();
                        closeDeleteModal();
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    Toastify({
                        text: "Failed to delete link ❌",
                        duration: 4000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "linear-gradient(to right, #ff5f6d, #ffc371)",
                        }
                    }).showToast();
                    closeDeleteModal();
                }
            };
            
            // Close modal when clicking overlay
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeDeleteModal();
                }
            });
        }

        // Animate browser bars on load
        document.addEventListener('DOMContentLoaded', () => {
            // Test that Toastify is loaded
            if (typeof Toastify !== 'undefined') {
                console.log('Toastify is loaded and ready!');
            } else {
                console.error('Toastify failed to load');
            }
            
            // Initialize D3.js charts
            initializeCharts();
        });

        // Initialize all D3.js charts
        function initializeCharts() {
            // Check if D3 is loaded
            if (typeof d3 === 'undefined') {
                console.error('D3.js is not loaded');
                return;
            }

            // Initialize click history chart
            const clickData = <%- JSON.stringify(stats.clickHistory) %>;
            createClickHistoryChart(clickData);

            // Initialize browser pie chart
            const browserData = <%- JSON.stringify(stats.browsers) %>;
            createBrowserPieChart(browserData);

            // Initialize referrer bar chart
            const referrerData = <%- JSON.stringify(stats.topReferrers) %>;
            createReferrerBarChart(referrerData);
        }

        // Create click history line chart
        function createClickHistoryChart(data) {
            const container = d3.select("#click-history-chart");
            const containerNode = container.node();
            if (!containerNode) return;

            // Clear any existing content
            container.selectAll("*").remove();

            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = containerNode.offsetWidth - margin.left - margin.right;
            const height = 150 - margin.top - margin.bottom;

            const svg = container.append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

            const g = svg.append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            // Parse data and ensure we have valid dates
            const parseDate = d3.timeParse("%m/%d/%Y");
            const processedData = data.map(d => ({
                date: parseDate(d.date) || new Date(d.date),
                clicks: d.clicks || 0
            })).filter(d => d.date);

            if (processedData.length === 0) {
                g.append("text")
                    .attr("x", width / 2)
                    .attr("y", height / 2)
                    .attr("text-anchor", "middle")
                    .style("fill", "var(--text2)")
                    .text("No data available");
                return;
            }

            // Scales
            const xScale = d3.scaleTime()
                .domain(d3.extent(processedData, d => d.date))
                .range([0, width]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(processedData, d => d.clicks) || 10])
                .nice()
                .range([height, 0]);

            // Line generator
            const line = d3.line()
                .x(d => xScale(d.date))
                .y(d => yScale(d.clicks))
                .curve(d3.curveMonotoneX);

            // Add grid lines
            g.selectAll(".grid-line")
                .data(yScale.ticks(4))
                .enter().append("line")
                .attr("class", "chart-grid")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", d => yScale(d))
                .attr("y2", d => yScale(d));

            // Add axes
            g.append("g")
                .attr("class", "chart-axis")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(xScale)
                    .tickFormat(d3.timeFormat("%m/%d"))
                    .ticks(Math.min(processedData.length, 5)));

            g.append("g")
                .attr("class", "chart-axis")
                .call(d3.axisLeft(yScale)
                    .ticks(4)
                    .tickFormat(d => d === 0 ? "0" : d));

            // Add line path
            g.append("path")
                .datum(processedData)
                .attr("class", "line-chart-path")
                .attr("d", line);

            // Add dots
            const tooltip = d3.select("body").append("div")
                .attr("class", "chart-tooltip");

            g.selectAll(".chart-dot")
                .data(processedData)
                .enter().append("circle")
                .attr("class", "chart-dot")
                .attr("cx", d => xScale(d.date))
                .attr("cy", d => yScale(d.clicks))
                .attr("r", 4)
                .on("mouseover", function(event, d) {
                    tooltip.style("opacity", 1)
                        .html(`<strong>${d3.timeFormat("%m/%d/%Y")(d.date)}</strong><br>${d.clicks} clicks`)
                        .style("left", (event.pageX + 10) + "px")
                        .style("top", (event.pageY - 10) + "px");
                })
                .on("mouseout", function() {
                    tooltip.style("opacity", 0);
                });
        }

        // Create browser pie chart
        function createBrowserPieChart(data) {
            const container = d3.select("#browser-pie-chart");
            const containerNode = container.node();
            if (!containerNode) return;

            // Clear any existing content
            container.selectAll("*").remove();

            if (!data || data.length === 0) {
                container.append("div")
                    .style("display", "flex")
                    .style("align-items", "center")
                    .style("justify-content", "center")
                    .style("height", "200px")
                    .style("color", "var(--text2)")
                    .text("No browser data available");
                return;
            }

            const width = containerNode.offsetWidth;
            const height = 200;
            const radius = Math.min(width, height) / 2 - 20;

            const svg = container.append("svg")
                .attr("width", width)
                .attr("height", height);

            const g = svg.append("g")
                .attr("transform", `translate(${width / 2},${height / 2})`);

            // Color scale
            const color = d3.scaleOrdinal()
                .domain(data.map(d => d.name))
                .range(['#d2691e', '#b7410e', '#8e7bbf', '#c7a6ff', '#ffd6e0']);

            // Pie generator
            const pie = d3.pie()
                .value(d => d.percentage || d.count || 1)
                .sort(null);

            // Arc generator
            const arc = d3.arc()
                .innerRadius(radius * 0.4)  // Donut chart
                .outerRadius(radius);

            const labelArc = d3.arc()
                .innerRadius(radius * 0.7)
                .outerRadius(radius * 0.7);

            // Create tooltip
            const tooltip = d3.select("body").append("div")
                .attr("class", "chart-tooltip");

            // Draw pie slices
            const slices = g.selectAll(".pie-slice")
                .data(pie(data))
                .enter().append("g")
                .attr("class", "pie-slice");

            slices.append("path")
                .attr("d", arc)
                .attr("fill", d => color(d.data.name))
                .on("mouseover", function(event, d) {
                    d3.select(this).style("filter", "brightness(1.1)");
                    tooltip.style("opacity", 1)
                        .html(`<strong>${d.data.name}</strong><br>${d.data.percentage || d.data.count}${d.data.percentage ? '%' : ' clicks'}`)
                        .style("left", (event.pageX + 10) + "px")
                        .style("top", (event.pageY - 10) + "px");
                })
                .on("mouseout", function() {
                    d3.select(this).style("filter", null);
                    tooltip.style("opacity", 0);
                });

            // Add labels
            slices.append("text")
                .attr("class", "pie-label")
                .attr("transform", d => `translate(${labelArc.centroid(d)})`)
                .attr("dy", "0.35em")
                .style("font-size", "11px")
                .text(d => {
                    const percentage = d.data.percentage || Math.round((d.data.count / d3.sum(data, d => d.count)) * 100);
                    return percentage > 5 ? `${percentage}%` : '';
                });

            // Add center text
            g.append("text")
                .attr("text-anchor", "middle")
                .attr("dy", "-0.1em")
                .style("font-size", "14px")
                .style("font-weight", "bold")
                .style("fill", "var(--text1)")
                .text("Browsers");

            g.append("text")
                .attr("text-anchor", "middle")
                .attr("dy", "1.2em")
                .style("font-size", "12px")
                .style("fill", "var(--text2)")
                .text(`${data.length} types`);
        }

        // Create referrer horizontal bar chart
        function createReferrerBarChart(data) {
            const container = d3.select("#referrer-bar-chart");
            const containerNode = container.node();
            if (!containerNode) return;

            // Clear any existing content
            container.selectAll("*").remove();

            if (!data || data.length === 0) {
                container.append("div")
                    .style("display", "flex")
                    .style("align-items", "center")
                    .style("justify-content", "center")
                    .style("height", "180px")
                    .style("color", "var(--text2)")
                    .text("No referrer data available");
                return;
            }

            const margin = { top: 20, right: 40, bottom: 30, left: 80 };
            const width = containerNode.offsetWidth - margin.left - margin.right;
            const height = 180 - margin.top - margin.bottom;

            const svg = container.append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

            const g = svg.append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            // Process data - limit to top 5 referrers
            const processedData = data.slice(0, 5);

            // Scales
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(processedData, d => d.count) || 10])
                .range([0, width]);

            const yScale = d3.scaleBand()
                .domain(processedData.map(d => d.name))
                .range([0, height])
                .padding(0.2);

            // Color scale
            const colorScale = d3.scaleOrdinal()
                .domain(processedData.map(d => d.name))
                .range(['#d2691e', '#b7410e', '#8e7bbf', '#c7a6ff', '#ffd6e0']);

            // Create tooltip
            const tooltip = d3.select("body").append("div")
                .attr("class", "chart-tooltip");

            // Add bars
            g.selectAll(".bar-rect")
                .data(processedData)
                .enter().append("rect")
                .attr("class", "bar-rect")
                .attr("y", d => yScale(d.name))
                .attr("height", yScale.bandwidth())
                .attr("x", 0)
                .attr("width", 0)
                .attr("fill", d => colorScale(d.name))
                .on("mouseover", function(event, d) {
                    d3.select(this).style("filter", "brightness(1.1)");
                    tooltip.style("opacity", 1)
                        .html(`<strong>${d.name}</strong><br>${d.count} visits`)
                        .style("left", (event.pageX + 10) + "px")
                        .style("top", (event.pageY - 10) + "px");
                })
                .on("mouseout", function() {
                    d3.select(this).style("filter", null);
                    tooltip.style("opacity", 0);
                })
                .transition()
                .duration(800)
                .delay((d, i) => i * 100)
                .attr("width", d => xScale(d.count));

            // Add value labels on bars
            g.selectAll(".bar-label")
                .data(processedData)
                .enter().append("text")
                .attr("class", "bar-label")
                .attr("x", d => xScale(d.count) + 5)
                .attr("y", d => yScale(d.name) + yScale.bandwidth() / 2)
                .attr("dy", "0.35em")
                .style("fill", "var(--text2)")
                .style("font-size", "12px")
                .style("opacity", 0)
                .text(d => d.count)
                .transition()
                .duration(800)
                .delay((d, i) => i * 100 + 400)
                .style("opacity", 1);

            // Add y-axis (referrer names)
            g.append("g")
                .attr("class", "chart-axis")
                .call(d3.axisLeft(yScale)
                    .tickSize(0))
                .selectAll("text")
                .style("font-size", "11px")
                .each(function(d) {
                    // Truncate long referrer names
                    const text = d3.select(this);
                    const originalText = text.text();
                    if (originalText.length > 12) {
                        text.text(originalText.substring(0, 12) + "...");
                    }
                });

            // Remove y-axis line
            g.select(".domain").remove();
        }
    </script>
        }
    </script>
</body>
</html>